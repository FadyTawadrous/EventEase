@using Microsoft.AspNetCore.Components.Forms
@inject RegistrationService RegistrationService

<div class="event-card">
    <h2>@Event.Name</h2>
    <p>@Event.Description</p>
    <p><strong>Date:</strong> @Event.Date.ToShortDateString()</p>
    <p><strong>Location:</strong> @Event.Location</p>
    <p><strong>Registered Attendees:</strong> @Event.TotalAttendees</p>
</div>
<br>

<h3>Registration Form</h3>
<p>Please fill out the form below to register for the event.</p>
<EditForm Model="@registration" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="registration.Name" class="form-control" />
        <ValidationMessage For="(() => registration.Name)" />
    </div>

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="registration.Email" class="form-control" />
        <ValidationMessage For="(() => registration.Email)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
    <a href="/registration-list" class="btn btn-link">View Submitted Registration</a>
</EditForm>


@if (isSubmitted)
{
    <p>Thank you for your feedback!</p>
}

@code {
    [Parameter] public EventModel Event { get; set; }
    private RegistrationModel registration = new();
    private bool isSubmitted = false;
    private void HandleValidSubmit()
    {
        registration.EventId = Event.Id;
        Event.TotalAttendees++;
        //Console.WriteLine(registration.EventId + " " + registration.Name + " " + registration.Email);
        RegistrationService.AddEntry(registration);
        registration = new RegistrationModel();
        isSubmitted = true;
    }
}