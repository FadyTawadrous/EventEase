@inject RegestrationModel RegestrationModel
@inject RegestrationService RegestrationService

<div class="event-card">
    <h2>@Event.Name</h2>
    <p>@Event.Description</p>
    <p><strong>Date:</strong> @Event.Date.ToShortDateString()</p>
    <p><strong>Location:</strong> @Event.Location</p>
</div>
<br>

<h3>Regestration Form</h3>
<p>Please fill out the form below to register for the event.</p>
<EditForm Model="@regestration" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @regestration.EventId = @Event.Id;

    <div>
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="regestration.Name" class="form-control" />
        <ValidationMessage For="(() => regestration.Name)" />
    </div>

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="regestration.Email" class="form-control" />
        <ValidationMessage For="(() => regestration.Email)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
    <a href="/regestration-list" class="btn btn-link">View Submitted Regestrations</a>
</EditForm>


@if (isSubmitted)
{
    <p>Thank you for your feedback!</p>
}

@code {
    [Parameter] public EventModel Event { get; set; }
    private RegestrationModel regestration = new();
    private bool isSubmitted = false;
    private void HandleValidSubmit()
    {
        RegestrationService.AddEntry(regestration);
        regestration = new RegestrationModel();
        isSubmitted = true;
    }
}